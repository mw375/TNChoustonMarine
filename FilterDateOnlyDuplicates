import arcpy, math
from arcpy import da
from math import hypot

arcpy.env.overwriteOutput = True #allows code to be rerun and overwrite the output files when needed

inpath = 'E:/0Val_Local/Phase2DataCleaning/2_PointsData_Fixed/HBST.gdb' #****CHANGE*******************************************
arcpy.env.workspace = inpath
outpath = 'E:/0Val_Local/Phase2DataCleaning/3_Filt1_DuplicatesRemoved_SpeedKMPH/HBST.gdb/'  #****CHANGE*******************************************
fcs = arcpy.ListFeatureClasses()

#Create a spatial reference object for the PCS (need to project the files on the fly from GCS to PCS for calculating distance travelled)
spatref = arcpy.SpatialReference(26916) #UTM 16N

for fc in fcs:
    if 'DATEONLY' in fc and 'NULLGEOM' not in fc: #do this since data from different sources likely has different field names or formats ****CHANGE*******************************************
        #---------------------------STEP ONE - CALCULATE TIME DELTA IN HOURS-------------------------------------------------------------------
        print fc
        vertices = fc
        firstRow = True
        arcpy.AddField_management(fc,"Dist_KM","DOUBLE")



        #---------------------STEP TWO - CALCULATE DISTANCE TRAVELED IN KM--------------------------------------------------------------------
        #Get coordinates of each feature (in PCS) and store it as a list of tuples.
        coord = [x[0] for x in arcpy.da.SearchCursor(fc, "SHAPE@XY", spatial_reference=spatref)]
        if (None,None) in coord:
            arcpy.Rename_management(fc,'{}_NULLGEOM'.format(fc))
            print fc
        else:
            #Compute distances between features.
            distances = [hypot(coord[i+1][0]-coord[i][0], coord[i+1][1]-coord[i][1]) for i,_ in enumerate(coord[:-1])]
            #Insert a 0 in the first position since it has nothing to measure against
            distances.insert(0, 0)
            #Write distances back to shapefile.
            with arcpy.da.UpdateCursor(fc, "Dist_KM") as rows:
                for j,row in enumerate(rows):
                    row[0] = distances[j]
                    rows.updateRow(row)
            arcpy.CalculateField_management(fc,'Dist_KM','[Dist_KM]/1000')


            #---------------------------STEP FOUR - FILTER DUPLICATE POINTS (Location, Time)------------------------------------------------------
            arcpy.MakeFeatureLayer_management(fc, "FL")
            #Can't apply t<1 second time filter for data with date only because it will remove valid points on the same day
            #Location < 1m is likely duplicate - remove (1m = 0.001 km) - select everything greater than that and export it to a new cleaned layer (added to the time selection)
            arcpy.SelectLayerByAttribute_management("FL",'NEW_SELECTION','OBJECTID=1 OR Dist_KM>0.001')  #****CHANGE*******************************************************************************************
            #Export selection as new filtered file
            arcpy.CopyFeatures_management("FL",outpath+fc+'_Filt1')

print 'code completed for input files from: '+inpath
print 'output files are stored at: '+outpath
