import arcpy, math
from arcpy import da
from math import hypot

arcpy.env.overwriteOutput = True #allows code to be rerun and overwrite the output files when needed

species = 'GS'#*****************************CHANGE***************************************************************

inpath = r'E:\0Val_Local\Phase2DataCleaning\6_SpeedFiltered_PointsData\{}.gdb'.format(species)
arcpy.env.workspace = inpath
fcs = arcpy.ListFeatureClasses()

outpath = 'E:/0Val_Local/Phase2DataCleaning/7_DuplicatesRemoved_Fixed/{}.gdb/'.format(species)

#Create a spatial reference object for the PCS (need to project the files on the fly from GCS to PCS for calculating distance travelled)
spatref = arcpy.SpatialReference(26916) #UTM 16N

for fc in fcs:
    if 'NULLGEOM' not in fc: #do this since data from different sources likely has different field names or formats ****CHANGE*******************************************
        #---------------------------STEP ONE - CALCULATE TIME DELTA IN HOURS-------------------------------------------------------------------
        print fc
        vertices = fc
        firstRow = True
        arcpy.AddField_management(fc,"TimeDelta","TEXT")
        arcpy.AddField_management(fc,"TimeDelta2","DOUBLE")
        arcpy.AddField_management(fc,"Dist_KM","DOUBLE")
        arcpy.AddField_management(fc,"SpeedKMPH","DOUBLE")

        #Calculate TimeDelta as a text field with format x days, hh:mm:ss as timestep (string field)
        # ***UPDATE THESE FIELD NAMES EACH RUN*** - should be id#, timefield, timedelta ***CHANGE FIELD NAMES FOR EACH RUN************************************************
        with arcpy.da.UpdateCursor(vertices,['OBJECTID','DateTime','TimeDelta']) as cursor:
            for row in cursor:
                gap2 = row[1]
                if firstRow == True:
                    gap1 = gap2
                    firstRow = False
                    continue
                row[2] = str(gap2 - gap1)
                gap1 = gap2
                cursor.updateRow(row)
        #Calculate TimeDelta2 as a double field with format x.xxxx (hours) as timestep
        arcpy.CalculateField_management(fc,"TimeDelta2", expression="get_hour( !TimeDelta!)", expression_type="PYTHON_9.3", code_block="def get_hour(time_str):\n    if 'days,' in time_str:\n        days, end = time_str.split('days,')\n        h,m,s = end.split(':')\n        return float(days)*24+float(h)+float(m)/60+float(s)/3600\n    elif 'day,' in time_str:\n        day, end = time_str.split('day,')\n        h,m,s = end.split(':')\n        return float(day)*24+float(h)+float(m)/60+float(s)/3600\n    else:\n        h, m, s = time_str.split(':')\n        return float(h)+float(m)/60+float(s)/3600")

        #Remove Null values from the TimeDelta2 field and replace with 0s (first row) - Null in this will give Null in speedKMPH which will mess up calculating the speed statistics
        arcpy.CalculateField_management(fc, "TimeDelta2", expression="RemoveNulls( !TimeDelta2!)", expression_type="PYTHON_9.3", code_block="def RemoveNulls(a):\n    if a == None:\n        return 0\n    else: \n        return a")

        #---------------------STEP TWO - CALCULATE DISTANCE TRAVELED IN KM--------------------------------------------------------------------
        #Get coordinates of each feature (in PCS) and store it as a list of tuples.
        coord = [x[0] for x in arcpy.da.SearchCursor(fc, "SHAPE@XY", spatial_reference=spatref)]
        #Filter out null geometries to prevent errors - filter these files separately in ArcMET
        if (None,None) in coord:
            arcpy.Rename_management(fc,'{}_NULLGEOM'.format(fc))
            print fc
        else:
        #Compute distances between features.
            distances = [hypot(coord[i+1][0]-coord[i][0], coord[i+1][1]-coord[i][1]) for i,_ in enumerate(coord[:-1])]
            #Insert a 0 in the first position since it has nothing to measure against
            distances.insert(0, 0)
            #Write distances back to shapefile.
            with arcpy.da.UpdateCursor(fc, "Dist_KM") as rows:
                for j,row in enumerate(rows):
                    row[0] = distances[j]
                    rows.updateRow(row)
            arcpy.CalculateField_management(fc,'Dist_KM','[Dist_KM]/1000')

            #---------------------------STEP THREE - CALCULATE SPEED IN KMPH----------------------------------------------------------------------
            arcpy.CalculateField_management(fc, "SpeedKMPH", expression="calcspeed( !Dist_KM!, !TimeDelta2!)", expression_type="PYTHON_9.3", code_block="def calcspeed(dist,time):\n    if time == 0:\n        return 0\n    else:\n        ans = dist/time\n        return ans")

            #Code is complete, delete unneccessary fields
            arcpy.DeleteField_management(fc,"TimeDelta")

            #---------------------------STEP FOUR - FILTER DUPLICATE POINTS (Location, Time)------------------------------------------------------
            arcpy.MakeFeatureLayer_management(fc, "FL")
            #TimeDif < 1s is likely duplicate - remove (1s = 0.000277778 hours) - select everything greater than that to export it to new cleaned layer (first selection)
            arcpy.SelectLayerByAttribute_management("FL",'NEW_SELECTION','OBJECTID=1 OR TimeDelta2>0.000277778') #****CHANGE**************************************************************************************
            timesremoved = arcpy.CopyFeatures_management("FL",outpath+fc+'_Filt1')
            #Location < 1m is likely duplicate - remove (1m = 0.001 km) - select everything greater than that and export it to a new cleaned layer (added to the time selection)
            arcpy.MakeFeatureLayer_management(timesremoved, "FL2")
            arcpy.SelectLayerByAttribute_management("FL2",'NEW_SELECTION','OBJECTID=1 OR Dist_KM>0.001')  #****CHANGE*******************************************************************************************
            #Export selection as new filtered file
            arcpy.CopyFeatures_management("FL",outpath+fc+'_Filt2')

print 'code completed for input files from: '+inpath
print 'output files are stored at: '+outpath
print 'input files:' + str(len(fcs))
arcpy.env.workspace = outpath
fcs2 = arcpy.ListFeatureClasses()
print 'output files:' + str(len(fcs2))
if str(len(fcs)*2) == str(len(fcs2)):
    print 'yes, same amount of input files as output files'
else:
    print 'no, different amount of input and output files'


